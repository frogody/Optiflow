'use client';

import {
  ArrowRightIcon,
  BriefcaseIcon,
  BuildingOfficeIcon,
  ChatBubbleLeftRightIcon,
  CheckCircleIcon,
  EnvelopeIcon,
  GlobeAltIcon,
  UserCircleIcon,
  UserGroupIcon,
} from '@heroicons/react/24/outline';
import { motion } from 'framer-motion';
import { AnimatePresence } from 'framer-motion';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useState, useRef, useEffect } from 'react';

// Define types for form steps and data
type FormStep = {
  id: string;
  title: string;
  description?: string;
  component: React.ReactNode;
};

type FormData = {
  isAiConsultant: boolean;
  firstName: string;
  lastName: string;
  email: string;
  companyName: string;
  companyWebsite: string;
  companySize: string;
  industry: string;
  useCase: string;
  additionalInfo: string;
};

// Initialize form steps outside the component to prevent reference errors during build
const createConsultantCheckStep = (updateFormData: (field: keyof FormData, value: any) => void, goToNextStep: () => void): FormStep => ({
  id: 'consultant-check',
  title: 'Are you an AI consultant?',
  description: 'We prioritize access for AI consultants to help them serve their clients better.',
  component: (
    <div className="flex flex-col space-y-4">
      <button
        type="button"
        onClick={() => {
          updateFormData('isAiConsultant', true);
          goToNextStep();
        }}
        className="px-6 py-4 bg-white/5 backdrop-blur-sm border border-white/10 rounded-xl hover:border-[#4AFFD4]/40 hover:bg-white/10 transition-all duration-300 text-left group flex justify-between items-center"
      >
        <span className="flex items-center">
          <ChatBubbleLeftRightIcon className="h-6 w-6 mr-3 text-[#4AFFD4]" />
          <span className="text-lg">Yes, I'm an AI consultant</span>
        </span>
        <ArrowRightIcon className="h-5 w-5 text-[#4AFFD4] opacity-0 group-hover:opacity-100 transform group-hover:translate-x-1 transition-all" />
      </button>
      
      <button
        type="button"
        onClick={() => {
          updateFormData('isAiConsultant', false);
          goToNextStep();
        }}
        className="px-6 py-4 bg-white/5 backdrop-blur-sm border border-white/10 rounded-xl hover:border-[#3CDFFF]/40 hover:bg-white/10 transition-all duration-300 text-left group flex justify-between items-center"
      >
        <span className="flex items-center">
          <BriefcaseIcon className="h-6 w-6 mr-3 text-[#3CDFFF]" />
          <span className="text-lg">No, I'm not an AI consultant</span>
        </span>
        <ArrowRightIcon className="h-5 w-5 text-[#3CDFFF] opacity-0 group-hover:opacity-100 transform group-hover:translate-x-1 transition-all" />
      </button>
    </div>
  ),
});

export default function BetaRegistration() {
  // Initialize empty array to prevent undefined errors during build
  const emptySteps: FormStep[] = [];

  const router = useRouter();
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [formData, setFormData] = useState<FormData>({
    isAiConsultant: false,
    firstName: '',
    lastName: '',
    email: '',
    companyName: '',
    companyWebsite: '',
    companySize: '',
    industry: '',
    useCase: '',
    additionalInfo: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const formRef = useRef<HTMLDivElement>(null);

  // Update form data
  const updateFormData = (field: keyof FormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  // Step navigation
  const goToNextStep = () => {
    if (currentStepIndex < formSteps.length - 1) {
      setCurrentStepIndex(currentStepIndex + 1);
    }
  };

  const goToPreviousStep = () => {
    if (currentStepIndex > 0) {
      setCurrentStepIndex(currentStepIndex - 1);
    }
  };

  // Handle form submission
  const handleSubmit = async () => {
    setIsSubmitting(true);
    
    try {
      // Send the data to the API
      const response = await fetch('/api/beta-access/request', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to submit beta request');
      }
      
      // Show success state
      setIsSubmitted(true);
      
      // Log the response data
      console.log('Beta request submitted:', data);
    } catch (error) {
      console.error('Error submitting form:', error);
      alert('Failed to submit your application. Please try again later.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Scroll to top of form when step changes
  useEffect(() => {
    if (formRef.current) {
      formRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [currentStepIndex]);

  // Pre-define all form steps outside of rendering to prevent variable hoisting issues
  const formSteps: FormStep[] = [
    createConsultantCheckStep(updateFormData, goToNextStep),
    {
      id: 'personal-info',
      title: 'Tell us about yourself',
      description: "We'd like to know who we're talking to.",
      component: (
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="firstName" className="block text-sm font-medium text-gray-300 mb-1">First Name</label>
              <input
                type="text"
                id="firstName"
                name="firstName"
                value={formData.firstName}
                onChange={(e) => updateFormData('firstName', e.target.value)}
                className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white placeholder-gray-500"
                placeholder="John"
                required
              />
            </div>
            <div>
              <label htmlFor="lastName" className="block text-sm font-medium text-gray-300 mb-1">Last Name</label>
              <input
                type="text"
                id="lastName"
                name="lastName"
                value={formData.lastName}
                onChange={(e) => updateFormData('lastName', e.target.value)}
                className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white placeholder-gray-500"
                placeholder="Doe"
                required
              />
            </div>
          </div>
          
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-300 mb-1">Work Email</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={(e) => updateFormData('email', e.target.value)}
              className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white placeholder-gray-500"
              placeholder="john@company.com"
              required
            />
          </div>
          
          <div className="pt-4 flex justify-end">
            <button
              type="button"
              onClick={goToNextStep}
              disabled={!formData.firstName || !formData.lastName || !formData.email}
              className="px-6 py-2 bg-gradient-to-r from-[#3CDFFF] to-[#4AFFD4] rounded-lg text-black text-lg font-medium hover:opacity-90 transition-all duration-300 flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Continue
              <ArrowRightIcon className="ml-2 h-5 w-5" />
            </button>
          </div>
        </div>
      ),
    },
    {
      id: 'company-info',
      title: 'Tell us about your company',
      description: 'We want to understand your organization better.',
      component: (
        <div className="space-y-6">
          <div>
            <label htmlFor="companyName" className="block text-sm font-medium text-gray-300 mb-1">Company Name</label>
            <input
              type="text"
              id="companyName"
              name="companyName"
              value={formData.companyName}
              onChange={(e) => updateFormData('companyName', e.target.value)}
              className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white placeholder-gray-500"
              placeholder="Acme Inc."
              required
            />
          </div>
          
          <div>
            <label htmlFor="companyWebsite" className="block text-sm font-medium text-gray-300 mb-1">Company Website</label>
            <input
              type="url"
              id="companyWebsite"
              name="companyWebsite"
              value={formData.companyWebsite}
              onChange={(e) => updateFormData('companyWebsite', e.target.value)}
              className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white placeholder-gray-500"
              placeholder="https://acme.com"
              required
            />
          </div>
          
          <div>
            <label htmlFor="companySize" className="block text-sm font-medium text-gray-300 mb-1">Company Size</label>
            <select
              id="companySize"
              name="companySize"
              value={formData.companySize}
              onChange={(e) => updateFormData('companySize', e.target.value)}
              className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white"
              required
            >
              <option value="" disabled>Select company size</option>
              <option value="1-10">1-10 employees</option>
              <option value="11-50">11-50 employees</option>
              <option value="51-200">51-200 employees</option>
              <option value="201-500">201-500 employees</option>
              <option value="501-1000">501-1000 employees</option>
              <option value="1001+">1001+ employees</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="industry" className="block text-sm font-medium text-gray-300 mb-1">Industry</label>
            <select
              id="industry"
              name="industry"
              value={formData.industry}
              onChange={(e) => updateFormData('industry', e.target.value)}
              className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white"
              required
            >
              <option value="" disabled>Select industry</option>
              <option value="Technology">Technology</option>
              <option value="Finance">Finance & Banking</option>
              <option value="Healthcare">Healthcare</option>
              <option value="Education">Education</option>
              <option value="Retail">Retail</option>
              <option value="Manufacturing">Manufacturing</option>
              <option value="Media">Media & Entertainment</option>
              <option value="Consulting">Consulting</option>
              <option value="Other">Other</option>
            </select>
          </div>
          
          <div className="pt-4 flex justify-between">
            <button
              type="button"
              onClick={goToPreviousStep}
              className="px-6 py-2 border border-[#3CDFFF] text-[#3CDFFF] rounded-lg font-medium hover:bg-[#3CDFFF]/10 transition-all duration-300"
            >
              Back
            </button>
            <button
              type="button"
              onClick={goToNextStep}
              disabled={!formData.companyName || !formData.companyWebsite || !formData.companySize || !formData.industry}
              className="px-6 py-2 bg-gradient-to-r from-[#3CDFFF] to-[#4AFFD4] rounded-lg text-black text-lg font-medium hover:opacity-90 transition-all duration-300 flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Continue
              <ArrowRightIcon className="ml-2 h-5 w-5" />
            </button>
          </div>
        </div>
      ),
    },
    {
      id: 'use-case',
      title: 'What will you use SYNC for?',
      description: 'Help us understand your needs better.',
      component: (
        <div className="space-y-6">
          <div>
            <label htmlFor="useCase" className="block text-sm font-medium text-gray-300 mb-1">Primary Use Case</label>
            <select
              id="useCase"
              name="useCase"
              value={formData.useCase}
              onChange={(e) => updateFormData('useCase', e.target.value)}
              className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white"
              required
            >
              <option value="" disabled>Select primary use case</option>
              <option value="Internal Workflow Automation">Internal Workflow Automation</option>
              <option value="Customer Support Automation">Customer Support Automation</option>
              <option value="Data Processing">Data Processing & Analysis</option>
              <option value="Integration Platform">Integration Between Tools</option>
              <option value="AI Development">AI Solution Development</option>
              <option value="Voice Assistants">Voice Assistants & Voice AI</option>
              <option value="Other">Other</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="additionalInfo" className="block text-sm font-medium text-gray-300 mb-1">
              Tell us more about your use case
            </label>
            <textarea
              id="additionalInfo"
              name="additionalInfo"
              value={formData.additionalInfo}
              onChange={(e) => updateFormData('additionalInfo', e.target.value)}
              rows={5}
              className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#3CDFFF]/50 text-white placeholder-gray-500"
              placeholder="Please describe how you plan to use our platform..."
              required
            />
          </div>
          
          <div className="pt-4 flex justify-between">
            <button
              type="button"
              onClick={goToPreviousStep}
              className="px-6 py-2 border border-[#3CDFFF] text-[#3CDFFF] rounded-lg font-medium hover:bg-[#3CDFFF]/10 transition-all duration-300"
            >
              Back
            </button>
            <button
              type="button"
              onClick={handleSubmit}
              disabled={!formData.useCase || !formData.additionalInfo || isSubmitting}
              className="px-6 py-2 bg-gradient-to-r from-[#3CDFFF] to-[#4AFFD4] rounded-lg text-black text-lg font-medium hover:opacity-90 transition-all duration-300 flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? 'Submitting...' : 'Submit Application'}
              {!isSubmitting && <ArrowRightIcon className="ml-2 h-5 w-5" />}
            </button>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div className="min-h-screen flex flex-col bg-[#111111] text-white">
      {/* Animated background */}
      <div className="fixed inset-0 z-0 overflow-hidden">
        <div className="absolute top-0 left-1/3 w-[500px] h-[500px] bg-gradient-to-r from-[#3CDFFF]/10 to-[#4AFFD4]/5 rounded-full filter blur-[100px] opacity-30 animate-pulse" />
        <div className="absolute bottom-1/3 right-1/4 w-[400px] h-[400px] bg-gradient-to-r from-purple-500/20 to-indigo-500/5 rounded-full filter blur-[80px] opacity-30 animate-pulse" style={{ animationDelay: '2s' }} />
      </div>
      
      {/* Main content */}
      <div className="flex-1 flex flex-col items-center relative z-10 px-4 py-12">
        {/* Logo */}
        <Link href="/" className="mb-12">
          <Image 
            src="/ISYNCSO_LOGO.png" 
            alt="SYNC" 
            width={180} 
            height={60}
            priority
          />
        </Link>
        
        <div className="w-full max-w-3xl" ref={formRef}>
          {/* Success Screen */}
          {isSubmitted ? (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-2xl p-8 text-center"
            >
              <div className="w-20 h-20 bg-[#4AFFD4]/20 rounded-full flex items-center justify-center mx-auto mb-6">
                <CheckCircleIcon className="h-12 w-12 text-[#4AFFD4]" />
              </div>
              <h2 className="text-3xl font-bold mb-4">Application Received!</h2>
              <p className="text-xl text-gray-300 mb-8">
                Thanks for your interest in SYNC, {formData.firstName}! We'll review your application and get back to you soon.
              </p>
              <p className="text-gray-400 mb-8">
                We prioritize applications based on use case and industry fit. You'll receive an email at <span className="text-[#3CDFFF]">{formData.email}</span> with your invitation code when you're approved.
              </p>
              <div className="flex flex-col md:flex-row justify-center gap-4">
                <Link 
                  href="/" 
                  className="px-6 py-3 bg-gradient-to-r from-[#3CDFFF] to-[#4AFFD4] rounded-lg text-black font-medium hover:opacity-90 transition-all duration-300"
                >
                  Return to Home
                </Link>
                <Link 
                  href="/login" 
                  className="px-6 py-3 border border-[#3CDFFF] text-[#3CDFFF] rounded-lg font-medium hover:bg-[#3CDFFF]/10 transition-all duration-300"
                >
                  Go to Login
                </Link>
              </div>
            </motion.div>
          ) : (
            <>
              {/* Progress bar */}
              <div className="mb-2 flex justify-between items-center">
                <span className="text-sm text-gray-400">Step {currentStepIndex + 1} of {formSteps.length}</span>
                <div className="w-32 bg-white/10 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-[#3CDFFF] to-[#4AFFD4] h-2 rounded-full transition-all duration-300"
                    style={{ width: `${((currentStepIndex + 1) / formSteps.length) * 100}%` }}
                  />
                </div>
              </div>
              
              {/* Form container */}
              <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-2xl p-8">
                {/* Step title */}
                <div className="mb-8">
                  <AnimatePresence mode="wait">
                    <motion.div
                      key={`title-${currentStepIndex}`}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <h2 className="text-3xl font-bold mb-2">{formSteps[currentStepIndex].title}</h2>
                      {formSteps[currentStepIndex].description && (
                        <p className="text-gray-400">{formSteps[currentStepIndex].description}</p>
                      )}
                    </motion.div>
                  </AnimatePresence>
                </div>
                
                {/* Step content */}
                <AnimatePresence mode="wait">
                  <motion.div
                    key={`step-${currentStepIndex}`}
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -20 }}
                    transition={{ duration: 0.3 }}
                  >
                    {formSteps[currentStepIndex].component}
                  </motion.div>
                </AnimatePresence>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
} 