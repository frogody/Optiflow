generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(uuid())
  email             String               @unique
  name              String?
  passwordHash      String?              @map("password_hash")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  lastLogin         DateTime?            @map("last_login")
  isActive          Boolean              @default(true) @map("is_active")
  role              String               @default("user")
  avatar            String?
  aiPrompts         AIPrompt[]
  aiTrainingData    AITrainingData[]
  apiKeys           ApiKey[]
  auditLogs         AuditLog[]
  comments          Comment[]
  notifications     Notification[]
  organizations     OrganizationMember[]
  voiceMetrics      UserVoiceMetrics[]
  voiceAnalytics    VoiceAnalytics[]
  voiceCommands     VoiceCommand[]
  voiceInteractions VoiceInteraction[]
  sharedWorkflows   WorkflowShare[]      @relation("SharedWith")
  workflows         Workflow[]
  knowledgeBases    KnowledgeBase[]
  knowledgeDocuments KnowledgeDocument[]

  @@map("users")
}

model Organization {
  id             String               @id @default(uuid())
  name           String
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  logo           String?
  plan           String               @default("free")
  aiPrompts      AIPrompt[]
  aiTrainingData AITrainingData[]
  members        OrganizationMember[]
  teams          Team[]
  workflows      Workflow[]
  knowledgeBases KnowledgeBase[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  role           String       @default("member")
  createdAt      DateTime     @default(now()) @map("created_at")
  permissions    Json?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teams          TeamMember[]

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Workflow {
  id                String              @id @default(uuid())
  name              String
  description       String?
  organizationId    String              @map("organization_id")
  createdById       String              @map("created_by")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  isActive          Boolean             @default(true) @map("is_active")
  version           Int                 @default(1)
  isPublic          Boolean             @default(false) @map("is_public")
  tags              String[]
  teamId            String?             @map("team_id")
  comments          Comment[]
  voiceAnalytics    VoiceAnalytics[]
  voiceInteractions VoiceInteraction[]
  edges             WorkflowEdge[]
  executions        WorkflowExecution[]
  nodes             WorkflowNode[]
  shares            WorkflowShare[]
  createdBy         User                @relation(fields: [createdById], references: [id])
  organization      Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team              Team?               @relation(fields: [teamId], references: [id])

  @@map("workflows")
}

model WorkflowNode {
  id          String          @id @default(uuid())
  workflowId  String          @map("workflow_id")
  type        String
  positionX   Int             @map("position_x")
  positionY   Int             @map("position_y")
  config      Json?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  executions  NodeExecution[]
  sourceEdges WorkflowEdge[]  @relation("SourceNode")
  targetEdges WorkflowEdge[]  @relation("TargetNode")
  workflow    Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_nodes")
}

model WorkflowEdge {
  id           String       @id @default(uuid())
  workflowId   String       @map("workflow_id")
  sourceNodeId String       @map("source_node_id")
  targetNodeId String       @map("target_node_id")
  createdAt    DateTime     @default(now()) @map("created_at")
  sourceNode   WorkflowNode @relation("SourceNode", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  targetNode   WorkflowNode @relation("TargetNode", fields: [targetNodeId], references: [id], onDelete: Cascade)
  workflow     Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_edges")
}

model WorkflowExecution {
  id          String          @id @default(uuid())
  workflowId  String          @map("workflow_id")
  status      String
  startedAt   DateTime        @default(now()) @map("started_at")
  completedAt DateTime?       @map("completed_at")
  error       String?
  inputData   Json?           @map("input_data")
  outputData  Json?           @map("output_data")
  nodes       NodeExecution[]
  workflow    Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_executions")
}

model NodeExecution {
  id                  String            @id @default(uuid())
  workflowExecutionId String            @map("workflow_execution_id")
  nodeId              String            @map("node_id")
  status              String
  startedAt           DateTime          @default(now()) @map("started_at")
  completedAt         DateTime?         @map("completed_at")
  error               String?
  inputData           Json?             @map("input_data")
  outputData          Json?             @map("output_data")
  node                WorkflowNode      @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  workflowExecution   WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  @@map("node_executions")
}

model ApiKey {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  keyHash    String    @map("key_hash")
  name       String?
  createdAt  DateTime  @default(now()) @map("created_at")
  lastUsedAt DateTime? @map("last_used_at")
  expiresAt  DateTime? @map("expires_at")
  isActive   Boolean   @default(true) @map("is_active")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  action     String
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  details    Json?
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Team {
  id             String       @id @default(uuid())
  name           String
  organizationId String       @map("organization_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  description    String?
  members        TeamMember[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workflows      Workflow[]
  knowledgeBases KnowledgeBase[]

  @@map("teams")
}

model TeamMember {
  id                   String             @id @default(uuid())
  teamId               String             @map("team_id")
  organizationMemberId String             @map("organization_member_id")
  role                 String             @default("member")
  createdAt            DateTime           @default(now()) @map("created_at")
  organizationMember   OrganizationMember @relation(fields: [organizationMemberId], references: [id], onDelete: Cascade)
  team                 Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, organizationMemberId])
  @@map("team_members")
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  userId     String    @map("user_id")
  workflowId String    @map("workflow_id")
  parentId   String?   @map("parent_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow   Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model WorkflowShare {
  id           String    @id @default(uuid())
  workflowId   String    @map("workflow_id")
  sharedWithId String    @map("shared_with_id")
  permissions  String    @default("view")
  createdAt    DateTime  @default(now()) @map("created_at")
  expiresAt    DateTime? @map("expires_at")
  sharedWith   User      @relation("SharedWith", fields: [sharedWithId], references: [id], onDelete: Cascade)
  workflow     Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, sharedWithId])
  @@map("workflow_shares")
}

model Notification {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  type       String
  title      String
  message    String
  isRead     Boolean  @default(false) @map("is_read")
  createdAt  DateTime @default(now()) @map("created_at")
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  data       Json?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AIModel {
  id            String           @id @default(uuid())
  name          String
  provider      String
  modelId       String           @map("model_id")
  capabilities  String[]
  maxTokens     Int              @default(4096) @map("max_tokens")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  isActive      Boolean          @default(true) @map("is_active")
  configuration Json?
  prompts       AIPrompt[]
  trainingData  AITrainingData[]

  @@index([provider, modelId])
  @@map("ai_models")
}

model AIPrompt {
  id             String       @id @default(cuid())
  name           String
  description    String
  prompt         String
  version        Int          @default(1)
  isPublic       Boolean      @default(false) @map("is_public")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  metadata       Json?
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  modelId        String?      @map("model_id")
  model          AIModel?     @relation(fields: [modelId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([organizationId])
  @@index([modelId])
  @@map("ai_prompts")
}

model AITrainingData {
  id             String       @id @default(cuid())
  name           String
  description    String
  data           Json
  version        Int          @default(1)
  status         String       @default("pending")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  processedAt    DateTime?    @map("processed_at")
  metadata       Json?
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  modelId        String?      @map("model_id")
  model          AIModel?     @relation(fields: [modelId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([organizationId])
  @@index([modelId])
  @@index([status])
  @@map("ai_training_data")
}

model VoiceInteraction {
  id           String                @id @default(uuid())
  userId       String                @map("user_id")
  workflowId   String?               @map("workflow_id")
  transcript   String
  intent       String?
  entities     Json?
  status       String                @default("pending")
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  conversation ConversationMessage[]
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow     Workflow?             @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("voice_interactions")
}

model ConversationMessage {
  id                 String           @id @default(uuid())
  voiceInteractionId String           @map("voice_interaction_id")
  role               String
  content            String
  metadata           Json?
  createdAt          DateTime         @default(now()) @map("created_at")
  voiceInteraction   VoiceInteraction @relation(fields: [voiceInteractionId], references: [id], onDelete: Cascade)

  @@map("conversation_messages")
}

model VoiceCommand {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  command   String
  intent    String
  entities  Json?
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voice_commands")
}

model VoiceAnalytics {
  id             String    @id @default(uuid())
  interactionId  String    @map("interaction_id")
  userId         String    @map("user_id")
  workflowId     String?   @map("workflow_id")
  transcript     String
  intent         String
  success        Boolean
  processingTime Int       @map("processing_time")
  errorMessage   String?   @map("error_message")
  metadata       Json?
  createdAt      DateTime  @default(now()) @map("created_at")
  user           User      @relation(fields: [userId], references: [id])
  workflow       Workflow? @relation(fields: [workflowId], references: [id])

  @@index([userId])
  @@index([workflowId])
  @@index([intent])
  @@index([success])
  @@map("voice_analytics")
}

model UserVoiceMetrics {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  date               DateTime @db.Date
  totalCommands      Int      @default(0) @map("total_commands")
  successfulCommands Int      @default(0) @map("successful_commands")
  failedCommands     Int      @default(0) @map("failed_commands")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  user               User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("user_voice_metrics")
}

model VoiceRecognitionAccuracy {
  id            String   @id @default(uuid())
  transcript    String
  confidence    Float
  correctedText String?  @map("corrected_text")
  wasCorrect    Boolean  @map("was_correct")
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([wasCorrect])
  @@map("voice_recognition_accuracy")
}

model ConsultationRequest {
  id        String   @id @default(uuid())
  name      String
  email     String
  company   String
  message   String
  status    String   @default("PENDING")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("consultation_requests")
}

model KnowledgeBase {
  id             String             @id @default(uuid())
  name           String
  description    String?
  type           String             @default("personal") // personal, team, organization
  ownerId        String?            @map("owner_id")
  teamId         String?            @map("team_id")
  organizationId String?            @map("organization_id")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  isPublic       Boolean            @default(false) @map("is_public")
  documents      KnowledgeDocument[]
  owner          User?              @relation(fields: [ownerId], references: [id])
  team           Team?              @relation(fields: [teamId], references: [id])
  organization   Organization?      @relation(fields: [organizationId], references: [id])

  @@index([type])
  @@index([ownerId])
  @@index([teamId])
  @@index([organizationId])
  @@map("knowledge_bases")
}

model KnowledgeDocument {
  id              String        @id @default(uuid())
  title           String
  content         String        @db.Text
  contentType     String        @default("text") @map("content_type") // text, markdown, html
  metadata        Json?
  knowledgeBaseId String        @map("knowledge_base_id")
  createdAt       DateTime      @default(now()) @map("created_at") 
  updatedAt       DateTime      @updatedAt @map("updated_at")
  createdById     String        @map("created_by_id")
  tags            String[]
  embedding       Json?         // Vector embedding for semantic search
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  createdBy       User          @relation(fields: [createdById], references: [id])

  @@index([knowledgeBaseId])
  @@index([createdById])
  @@index([contentType])
  @@map("knowledge_documents")
}

model UserRoom {
  id            Int      @id @default(autoincrement())
  userId        String   @unique
  roomName      String   @unique
  createdAt     DateTime @default(now())
  metadata      Json?
  participants  Json?    // Array of user objects: [{ id, name, role, joinedAt }]
  agents        Json?    // Array of agent objects: [{ id, capabilities, joinedAt }]
  sessionHistory Json?   // Array of action logs: [{ actor, action, timestamp }]
  orchestratorAssignments OrchestratorAssignment[]
}

model Agent {
  id           String   @id @default(uuid())
  name         String
  identity     String   @unique
  capabilities String[]
  status       String   @default("active")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assignments  OrchestratorAssignment[]
}

model OrchestratorAssignment {
  id        String   @id @default(uuid())
  agentId   String
  roomId    Int
  role      String   // orchestrator, assistant, etc.
  assignedAt DateTime @default(now())
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  userRoom  UserRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model PipedreamConnection {
  id         String   @id @default(uuid())
  userId     String
  service    String
  accountId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, service])
}
