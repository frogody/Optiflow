name: Deploy Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: npm run build

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      TEST_BASE_URL: ${{ secrets.VERCEL_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      
      # Set up environment variables from GitHub secrets
      - name: Create .env.production file
        run: |
          echo "# Pipedream Configuration" > .env.production
          echo "NEXT_PUBLIC_PIPEDREAM_API_KEY=${{ secrets.PIPEDREAM_API_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_PIPEDREAM_API_SECRET=${{ secrets.PIPEDREAM_API_SECRET }}" >> .env.production
          echo "NEXT_PUBLIC_PIPEDREAM_CLIENT_ID=${{ secrets.PIPEDREAM_CLIENT_ID }}" >> .env.production
          echo "NEXT_PUBLIC_PIPEDREAM_TOKEN=${{ secrets.PIPEDREAM_TOKEN }}" >> .env.production
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.production
          echo "NODE_ENV=production" >> .env.production
          echo "" >> .env.production
          echo "# NextAuth.js" >> .env.production
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env.production
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env.production
          echo "" >> .env.production
          echo "# Google OAuth" >> .env.production
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.production
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.production
          echo "" >> .env.production
          echo "# Vercel Configuration" >> .env.production
          echo "VERCEL_TOKEN=${{ secrets.VERCEL_TOKEN }}" >> .env.production
          echo "VERCEL_ORG_ID=${{ secrets.VERCEL_ORG_ID }}" >> .env.production
          echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}" >> .env.production
          echo "" >> .env.production
          echo "# LiveKit Configuration" >> .env.production
          echo "LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }}" >> .env.production
          echo "LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}" >> .env.production
          echo "LIVEKIT_URL=${{ secrets.LIVEKIT_URL }}" >> .env.production
      
      # Deploy to Vercel
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25.2.0
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'
      - name: Set TEST_BASE_URL fallback
        run: |
          echo "TEST_BASE_URL=\"${TEST_BASE_URL:-http://app.isyncto.com}\"" >> $GITHUB_ENV 